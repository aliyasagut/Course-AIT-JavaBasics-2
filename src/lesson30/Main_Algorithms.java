package lesson30;

public class Main_Algorithms {
    // Введение в алгоритмы и анализ их сложности.
    /*
    Алгоритм - это последовательность шагов, котрая представляет из себя исключительно вычисления
    и не учитывает особенности реализации "компьютерного железа", на котром она запущена.
    Анализ сложности дает возможность узнать, как быстро будет работать программа, когда она совершает
    вычисления на разных объемах входных данных.
     */

    public int findMax(int[] ints, int n) {
        int max = ints[0]; // 2 действия
        // 2 действия (инструкции) до запуска цикла: инициализация и сравнение
        for (int i = 0; i < n; i++) {
            if (ints[i] > max) { // 2 действия, которые происходят всегда: поиск в массиве и сравнение
                max = ints[i];
            }
        }
        return max;
    }
    //f(n) = 4 + 2n // необходимое алгоритму количество инструкций для цикла for с пустым телом
    // в теории алгоритмов рассматриваются наихудшие сценарии развития событий
    // в нашем случае это массив упорядоченный по возрастанию
    // макс перезаписывается при каждой итерации

    // f(n) = 4 + 2n + 4n = 4 + 6n
    // f(n) = 6n, когда значение n сильно возрастает, константы не важны, поэтому 4 отбрасываем
    // вместо 6n мы можем написать:
    // f(n) = n, асимптотическое поведение функции, предел функции при n стремящейся к бесконечности

    // f(n) = 4n + 4 => f(n) = f(n)
    // f(n) = 150 * 1 => f(n) = 1
    // f(n) = n^2 + 4n + 478 => f(n) = n^2
    // f(n) = n^3 + 5n + 43478 => f(n) = n^3
    // f(n) = n + sqrt(n) => f(n) = n

    public static void drewTriangle(int n) {
        for (int j = 1; j <= n; j++) {
            System.out.print(j);
        }

        for (int i = 1; i <= n; i++) {
            for (int j = 1; j <= i; j++) {
                System.out.print(j);
            }
            System.out.println();
        }
    }
    // вложенный цикл дает поведение f(n) = n^2
    // Если в программе есть несколько последовательных циклов, то
    // симтотическое поведенеи программы определяется самым медленным из них

    public static void main(String[] args) {
        drewTriangle(6);

        char theta = '\u03f4';
        System.out.println(theta);
        /*
        ϴ(f(n))
        ϴ(1) - алгоритм с константным временем
        ϴ(n) - линейный алгоритм, имеет сложность n
        ϴ(n^2) - квадратичный алгоритм

        Big O
        O(1) -  алгоритм с константным временем, сложность 1
        O(n) - сложность алгоритма O(n)
        O(n^2) - сложность алгоритма O(n^2)
        О(log n) логарифмическая сложность

        log - это та степень, в которую нужно возвести 2, чтобы получить число
        log(1024) = 10, 2^10 = 1024
        log(64) = 6, 2^6 = 64


         */
    }


}

